name: "Deploy App"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Frontend Dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

  build-backend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: backend/src/main/resources/static

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with maven
        run: mvn -B -DskipTests package --file backend/pom.xml
        env:
          MAVEN_OPTS: "-Xmx2048m"

      - name: Verify JAR exists
        run: |
          if [ ! -f backend/target/app.jar ]; then
            echo "Error: app.jar not found!"
            exit 1
          fi
          ls -lh backend/target/app.jar

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.jar
          path: backend/target/app.jar

  push-to-docker-hub:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v4

      - name: Download Backend JAR
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          path: backend/target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=ref,event=branch

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_IMAGE }}:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_IMAGE }}:latest,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

# name: deploy-to-render
  deploy:
    needs: push-to-docker-hub
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' }}
      url: ${{ steps.deploy-info.outputs.app_url }}

    steps:
      - name: Trigger Render Deployment
        id: trigger-deploy
        run: |
          response=$(curl -s -w "\n%{http_code}" -X POST "${{ steps.env-vars.outputs.deploy_hook }}")
          http_code=$(echo "$response" | tail -n1)
            
           if [ "$http_code" -ne 200 ] && [ "$http_code" -ne 201 ]; then
             echo "Deployment trigger failed with HTTP $http_code"
             exit 1
           fi
            
           echo "Deployment triggered successfully for ${{ steps.env-vars.outputs.environment }}"

      - name: Wait for deployment to start
        run: |
          echo "Waiting 45 seconds for deployment to initialize..."
          sleep 45

      - name: Health Check with Retry
        id: health-check
        run: |
          max_attempts=20
          attempt=0
          health_url="${{ steps.env-vars.outputs.health_check_url }}"
          
          echo "Starting health checks for: $health_url"
                
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt of $max_attempts..."
          
            response=$(curl -s -w "\n%{http_code}" "$health_url" || echo "000")
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | he  
                
            if [ "$http_code" == "200" ]; then
              echo "Health check passed!"
              echo "Response: $body"
              echo "status=healthy" >> $GITHUB_OUTPUT
              exit 0
            fi
                
            echo "Health check returned HTTP $http_code, retrying in 15 seconds..."
            sleep 15
          done
                
          echo "Health check failed after $max_attempts attempts"
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          exit 1
